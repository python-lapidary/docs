# This file is automatically @generated by Lapidary and should not be changed by hand.

from __future__ import annotations

__all__ = (
    'ApiClient',
)

import lapidary.runtime
import pydantic
import typing_extensions as typing
import pydantic
import test_petstore.components.schemas.ApiResponse.schema
import test_petstore.components.schemas.Order.schema
import test_petstore.components.schemas.Pet.schema
import test_petstore.components.schemas.User.schema
import test_petstore.paths.u_lpetu_lu_1zpetIdu_21.delete.parameters.meta
import test_petstore.paths.u_luseru_llogin.get.responses.u_o00.headers
import types


class ApiClient(lapidary.runtime.ClientBase):
    
    def __init__(
        self,
        *, base_url: str = 'https://petstore3.swagger.io/v3',
        **kwargs,
    ) -> None:
        super().__init__(
            base_url=base_url,
            **kwargs,
        )
    
    @lapidary.runtime.post(
        '/pet',
        security=({'petstore_auth': ('write:pets', 'read:pets')},),
    )
    async def addPet(
        self: typing.Self,
        body: typing.Annotated[
            test_petstore.components.schemas.Pet.schema.Pet,
            lapidary.runtime.Body({
                'application/json': test_petstore.components.schemas.Pet.schema.Pet,
            },),
        ],
    ) -> typing.Annotated[
            tuple[
            test_petstore.components.schemas.Pet.schema.Pet,
            None,
        ],
            lapidary.runtime.Responses({
                '200': lapidary.runtime.Response(
                    lapidary.runtime.Body({
                        'application/json': test_petstore.components.schemas.Pet.schema.Pet,
                    },),
                ),
                '405': lapidary.runtime.Response(
                    lapidary.runtime.Body({},),
                ),
            },),
        ]:
        pass
    
    @lapidary.runtime.put(
        '/pet',
        security=({'petstore_auth': ('write:pets', 'read:pets')},),
    )
    async def updatePet(
        self: typing.Self,
        body: typing.Annotated[
            test_petstore.components.schemas.Pet.schema.Pet,
            lapidary.runtime.Body({
                'application/json': test_petstore.components.schemas.Pet.schema.Pet,
            },),
        ],
    ) -> typing.Annotated[
            tuple[
            test_petstore.components.schemas.Pet.schema.Pet,
            None,
        ],
            lapidary.runtime.Responses({
                '200': lapidary.runtime.Response(
                    lapidary.runtime.Body({
                        'application/json': test_petstore.components.schemas.Pet.schema.Pet,
                    },),
                ),
                '400': lapidary.runtime.Response(
                    lapidary.runtime.Body({},),
                ),
                '404': lapidary.runtime.Response(
                    lapidary.runtime.Body({},),
                ),
                '405': lapidary.runtime.Response(
                    lapidary.runtime.Body({},),
                ),
            },),
        ]:
        pass
    
    @lapidary.runtime.get(
        '/pet/findByStatus',
        security=({'petstore_auth': ('write:pets', 'read:pets')},),
    )
    async def findPetsByStatus(
        self: typing.Self,
        *, status_q: typing.Annotated[
            typing.Union[
            str,
            None,
        ],
            lapidary.runtime.Query(
        'status',
        style=lapidary.runtime.FormExplode,
    ),
        ] = None,
    ) -> typing.Annotated[
            tuple[
            list[test_petstore.components.schemas.Pet.schema.Pet,],
            None,
        ],
            lapidary.runtime.Responses({
                '200': lapidary.runtime.Response(
                    lapidary.runtime.Body({
                        'application/json': list[test_petstore.components.schemas.Pet.schema.Pet,],
                    },),
                ),
                '400': lapidary.runtime.Response(
                    lapidary.runtime.Body({},),
                ),
            },),
        ]:
        pass
    
    @lapidary.runtime.get(
        '/pet/findByTags',
        security=({'petstore_auth': ('write:pets', 'read:pets')},),
    )
    async def findPetsByTags(
        self: typing.Self,
        *, tags_q: typing.Annotated[
            typing.Union[
            list[str,],
            None,
        ],
            lapidary.runtime.Query(
        'tags',
        style=lapidary.runtime.FormExplode,
    ),
        ] = None,
    ) -> typing.Annotated[
            tuple[
            list[test_petstore.components.schemas.Pet.schema.Pet,],
            None,
        ],
            lapidary.runtime.Responses({
                '200': lapidary.runtime.Response(
                    lapidary.runtime.Body({
                        'application/json': list[test_petstore.components.schemas.Pet.schema.Pet,],
                    },),
                ),
                '400': lapidary.runtime.Response(
                    lapidary.runtime.Body({},),
                ),
            },),
        ]:
        pass
    
    @lapidary.runtime.get(
        '/pet/{petId}',
        security=(
            {'api_key': ()},
            {'petstore_auth': ('write:pets', 'read:pets')},
        ),
    )
    async def getPetById(
        self: typing.Self,
        *, petId_p: typing.Annotated[
            int,
            lapidary.runtime.Path('petId',),
        ],
    ) -> typing.Annotated[
            tuple[
            test_petstore.components.schemas.Pet.schema.Pet,
            None,
        ],
            lapidary.runtime.Responses({
                '200': lapidary.runtime.Response(
                    lapidary.runtime.Body({
                        'application/json': test_petstore.components.schemas.Pet.schema.Pet,
                    },),
                ),
                '400': lapidary.runtime.Response(
                    lapidary.runtime.Body({},),
                ),
                '404': lapidary.runtime.Response(
                    lapidary.runtime.Body({},),
                ),
            },),
        ]:
        pass
    
    @lapidary.runtime.post(
        '/pet/{petId}',
        security=({'petstore_auth': ('write:pets', 'read:pets')},),
    )
    async def updatePetWithForm(
        self: typing.Self,
        *, petId_p: typing.Annotated[
            int,
            lapidary.runtime.Path('petId',),
        ],
        name_q: typing.Annotated[
            typing.Union[
            str,
            None,
        ],
            lapidary.runtime.Query('name',),
        ] = None,
        status_q: typing.Annotated[
            typing.Union[
            str,
            None,
        ],
            lapidary.runtime.Query('status',),
        ] = None,
    ) -> typing.Annotated[
            None,
            lapidary.runtime.Responses({
                '405': lapidary.runtime.Response(
                    lapidary.runtime.Body({},),
                ),
            },),
        ]:
        pass
    
    @lapidary.runtime.delete(
        '/pet/{petId}',
        security=({'petstore_auth': ('write:pets', 'read:pets')},),
    )
    async def deletePet(
        self: typing.Self,
        *, petId_p: typing.Annotated[
            int,
            lapidary.runtime.Path('petId',),
        ],
        meta: typing.Annotated[
            typing.Union[
            test_petstore.paths.u_lpetu_lu_1zpetIdu_21.delete.parameters.meta.RequestMetadata,
            None,
        ],
            lapidary.runtime.Metadata,
        ] = None,
    ) -> typing.Annotated[
            None,
            lapidary.runtime.Responses({
                '400': lapidary.runtime.Response(
                    lapidary.runtime.Body({},),
                ),
            },),
        ]:
        pass
    
    @lapidary.runtime.post(
        '/pet/{petId}/uploadImage',
        security=({'petstore_auth': ('write:pets', 'read:pets')},),
    )
    async def uploadFile(
        self: typing.Self,
        *, petId_p: typing.Annotated[
            int,
            lapidary.runtime.Path('petId',),
        ],
        additionalMetadata_q: typing.Annotated[
            typing.Union[
            str,
            None,
        ],
            lapidary.runtime.Query('additionalMetadata',),
        ] = None,
    ) -> typing.Annotated[
            tuple[
            test_petstore.components.schemas.ApiResponse.schema.ApiResponse,
            None,
        ],
            lapidary.runtime.Responses({
                '200': lapidary.runtime.Response(
                    lapidary.runtime.Body({
                        'application/json': test_petstore.components.schemas.ApiResponse.schema.ApiResponse,
                    },),
                ),
            },),
        ]:
        pass
    
    @lapidary.runtime.get(
        '/store/inventory',
        security=({'api_key': ()},),
    )
    async def getInventory(
        self: typing.Self,
    ) -> typing.Annotated[
            tuple[
            dict[
                str,
                pydantic.JsonValue,
            ],
            None,
        ],
            lapidary.runtime.Responses({
                '200': lapidary.runtime.Response(
                    lapidary.runtime.Body({
                        'application/json': dict[
                            str,
                            pydantic.JsonValue,
                        ],
                    },),
                ),
            },),
        ]:
        pass
    
    @lapidary.runtime.post('/store/order',)
    async def placeOrder(
        self: typing.Self,
        body: typing.Annotated[
            test_petstore.components.schemas.Order.schema.Order,
            lapidary.runtime.Body({
                'application/json': test_petstore.components.schemas.Order.schema.Order,
            },),
        ],
    ) -> typing.Annotated[
            tuple[
            test_petstore.components.schemas.Order.schema.Order,
            None,
        ],
            lapidary.runtime.Responses({
                '200': lapidary.runtime.Response(
                    lapidary.runtime.Body({
                        'application/json': test_petstore.components.schemas.Order.schema.Order,
                    },),
                ),
                '405': lapidary.runtime.Response(
                    lapidary.runtime.Body({},),
                ),
            },),
        ]:
        pass
    
    @lapidary.runtime.get('/store/order/{orderId}',)
    async def getOrderById(
        self: typing.Self,
        *, orderId_p: typing.Annotated[
            int,
            lapidary.runtime.Path('orderId',),
        ],
    ) -> typing.Annotated[
            tuple[
            test_petstore.components.schemas.Order.schema.Order,
            None,
        ],
            lapidary.runtime.Responses({
                '200': lapidary.runtime.Response(
                    lapidary.runtime.Body({
                        'application/json': test_petstore.components.schemas.Order.schema.Order,
                    },),
                ),
                '400': lapidary.runtime.Response(
                    lapidary.runtime.Body({},),
                ),
                '404': lapidary.runtime.Response(
                    lapidary.runtime.Body({},),
                ),
            },),
        ]:
        pass
    
    @lapidary.runtime.delete('/store/order/{orderId}',)
    async def deleteOrder(
        self: typing.Self,
        *, orderId_p: typing.Annotated[
            int,
            lapidary.runtime.Path('orderId',),
        ],
    ) -> typing.Annotated[
            None,
            lapidary.runtime.Responses({
                '400': lapidary.runtime.Response(
                    lapidary.runtime.Body({},),
                ),
                '404': lapidary.runtime.Response(
                    lapidary.runtime.Body({},),
                ),
            },),
        ]:
        pass
    
    @lapidary.runtime.post('/user',)
    async def createUser(
        self: typing.Self,
        body: typing.Annotated[
            test_petstore.components.schemas.User.schema.User,
            lapidary.runtime.Body({
                'application/json': test_petstore.components.schemas.User.schema.User,
            },),
        ],
    ) -> typing.Annotated[
            tuple[
            test_petstore.components.schemas.User.schema.User,
            None,
        ],
            lapidary.runtime.Responses({
                'default': lapidary.runtime.Response(
                    lapidary.runtime.Body({
                        'application/json': test_petstore.components.schemas.User.schema.User,
                    },),
                ),
            },),
        ]:
        pass
    
    @lapidary.runtime.post('/user/createWithList',)
    async def createUsersWithListInput(
        self: typing.Self,
        body: typing.Annotated[
            list[test_petstore.components.schemas.User.schema.User,],
            lapidary.runtime.Body({
                'application/json': list[test_petstore.components.schemas.User.schema.User,],
            },),
        ],
    ) -> typing.Annotated[
            typing.Union[
            tuple[
                test_petstore.components.schemas.User.schema.User,
                None,
            ],
            tuple[
                None,
                None,
            ],
        ],
            lapidary.runtime.Responses({
                '200': lapidary.runtime.Response(
                    lapidary.runtime.Body({
                        'application/json': test_petstore.components.schemas.User.schema.User,
                    },),
                ),
                'default': lapidary.runtime.Response(
                    lapidary.runtime.Body({},),
                ),
            },),
        ]:
        pass
    
    @lapidary.runtime.get('/user/login',)
    async def loginUser(
        self: typing.Self,
        *, username_q: typing.Annotated[
            typing.Union[
            str,
            None,
        ],
            lapidary.runtime.Query('username',),
        ] = None,
        password_q: typing.Annotated[
            typing.Union[
            str,
            None,
        ],
            lapidary.runtime.Query('password',),
        ] = None,
    ) -> typing.Annotated[
            tuple[
            str,
            test_petstore.paths.u_luseru_llogin.get.responses.u_o00.headers.ResponseMetadata,
        ],
            lapidary.runtime.Responses({
                '200': lapidary.runtime.Response(
                    lapidary.runtime.Body({
                        'application/json': str,
                    },),
                    test_petstore.paths.u_luseru_llogin.get.responses.u_o00.headers.ResponseMetadata,
                ),
                '400': lapidary.runtime.Response(
                    lapidary.runtime.Body({},),
                ),
            },),
        ]:
        pass
    
    @lapidary.runtime.get('/user/logout',)
    async def logoutUser(
        self: typing.Self,
    ) -> typing.Annotated[
            tuple[
            None,
            None,
        ],
            lapidary.runtime.Responses({
                'default': lapidary.runtime.Response(
                    lapidary.runtime.Body({},),
                ),
            },),
        ]:
        pass
    
    @lapidary.runtime.get('/user/{username}',)
    async def getUserByName(
        self: typing.Self,
        *, username_p: typing.Annotated[
            str,
            lapidary.runtime.Path('username',),
        ],
    ) -> typing.Annotated[
            tuple[
            test_petstore.components.schemas.User.schema.User,
            None,
        ],
            lapidary.runtime.Responses({
                '200': lapidary.runtime.Response(
                    lapidary.runtime.Body({
                        'application/json': test_petstore.components.schemas.User.schema.User,
                    },),
                ),
                '400': lapidary.runtime.Response(
                    lapidary.runtime.Body({},),
                ),
                '404': lapidary.runtime.Response(
                    lapidary.runtime.Body({},),
                ),
            },),
        ]:
        pass
    
    @lapidary.runtime.put('/user/{username}',)
    async def updateUser(
        self: typing.Self,
        body: typing.Annotated[
            test_petstore.components.schemas.User.schema.User,
            lapidary.runtime.Body({
                'application/json': test_petstore.components.schemas.User.schema.User,
            },),
        ],
        *, username_p: typing.Annotated[
            str,
            lapidary.runtime.Path('username',),
        ],
    ) -> typing.Annotated[
            tuple[
            None,
            None,
        ],
            lapidary.runtime.Responses({
                'default': lapidary.runtime.Response(
                    lapidary.runtime.Body({},),
                ),
            },),
        ]:
        pass
    
    @lapidary.runtime.delete('/user/{username}',)
    async def deleteUser(
        self: typing.Self,
        *, username_p: typing.Annotated[
            str,
            lapidary.runtime.Path('username',),
        ],
    ) -> typing.Annotated[
            None,
            lapidary.runtime.Responses({
                '400': lapidary.runtime.Response(
                    lapidary.runtime.Body({},),
                ),
                '404': lapidary.runtime.Response(
                    lapidary.runtime.Body({},),
                ),
            },),
        ]:
        pass
